{"version":3,"sources":["views/Predict.js"],"names":["Predict","props","state","states","chosenState","LoadPercentage","loading","loadText","loadColor","loadDiv","style","height","margin","position","maxWidth","left","src","this","setState","start","setInterval","clearInterval","padding","history","push","class","pathName","className","md","htmlFor","custom","name","id","map","xs","color","onClick","startload","value","showPercentage","animated","width","type","role","aria-hidden","Component"],"mappings":"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","file":"static/js/8.2083827b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardGroup,\r\n    CCol,\r\n    CContainer,\r\n    CForm,\r\n    CSelect,\r\n    CFormGroup,\r\n    CLabel,\r\n    CRow,\r\n    CCardFooter,\r\n    CProgress\r\n} from '@coreui/react'\r\n\r\n\r\n\r\nclass Predict extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            states: [\"Andhra Pradesh\",\r\n                \"Arunachal Pradesh\",\r\n                \"Assam\",\r\n                \"Bihar\",\r\n                \"Chhattisgarh\",\r\n                \"Goa\",\r\n                \"Gujarat\",\r\n                \"Haryana\",\r\n                \"Himachal Pradesh\",\r\n                \"Jammu and Kashmir\",\r\n                \"Jharkhand\",\r\n                \"Karnataka\",\r\n                \"Kerala\",\r\n                \"Madhya Pradesh\",\r\n                \"Maharashtra\",\r\n                \"Manipur\",\r\n                \"Meghalaya\",\r\n                \"Mizoram\",\r\n                \"Nagaland\",\r\n                \"Odisha\",\r\n                \"Punjab\",\r\n                \"Rajasthan\",\r\n                \"Sikkim\",\r\n                \"Tamil Nadu\",\r\n                \"Telangana\",\r\n                \"Tripura\",\r\n                \"Uttarakhand\",\r\n                \"Uttar Pradesh\",\r\n                \"West Bengal\",\r\n                \"Andaman and Nicobar Islands\",\r\n                \"Chandigarh\",\r\n                \"Dadra and Nagar Haveli\",\r\n                \"Daman and Diu\",\r\n                \"Delhi\",\r\n                \"Lakshadweep\",\r\n                \"Puducherry\"],\r\n            chosenState: \"Delhi\",\r\n            LoadPercentage: 0,\r\n            loading: false,\r\n            loadText: 'Scraping web pages',\r\n            loadColor: 'info',\r\n            loadDiv: <img style={{ height: '300px', margin: '0 auto', position: 'relative', maxWidth: '800px', left: '150px' }} src='./load_scrape.gif'></img>\r\n        }\r\n    }\r\n    startload() {\r\n        this.setState({\r\n            loading: true,\r\n        })\r\n        var start = setInterval(() => {\r\n            if (this.state.LoadPercentage >= 400) {\r\n                clearInterval(start);\r\n                this.setState({\r\n                    loading: false,\r\n                    LoadPercentage: 0,\r\n                    loadText: 'Scraping web pages',\r\n                    loadDiv: <img style={{ height: '300px', padding: '0 auto', position: 'relative', maxWidth: '800px', left: '150px' }} src='./load_scrape.gif'></img>\r\n                })\r\n                this.props.history.push('/trends');\r\n            }\r\n            else if (this.state.LoadPercentage >= 300) {\r\n                this.setState({\r\n                    loadColor: 'success',\r\n                    loadText: 'Plotting graphs',\r\n                    loadDiv: <img style={{ height: '300px', padding: '0 auto', position: 'relative', maxWidth: '800px' }} src='./load_plot.gif'></img>\r\n                })\r\n            }\r\n            else if (this.state.LoadPercentage >= 200) {\r\n                this.setState({\r\n                    loadColor: 'danger',\r\n                    loadText: 'ML model processing images',\r\n                    loadDiv: <img style={{ height: '300px', margin: '0 auto', position: 'relative', maxWidth: '800px', left: '75px' }} src='./load_analysis.gif'></img>\r\n                })\r\n            }\r\n            else if (this.state.LoadPercentage >= 100) {\r\n                this.setState({\r\n                    loadColor: 'warning',\r\n                    loadText: 'Analysing scraped images',\r\n                    loadDiv: <div class=\"tech-slideshow\">\r\n                        <div class=\"mover-1\"></div>\r\n                        <div class=\"mover-2\"></div>\r\n                    </div>\r\n                })\r\n            }\r\n            this.setState({\r\n                LoadPercentage: this.state.LoadPercentage + 1,\r\n            })\r\n        }, 100);\r\n        this.props.history.push({\r\n            pathName: '/trends',\r\n            state: {\r\n                state: this.state.chosenState\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n                <CContainer>\r\n                    <CRow className=\"justify-content-center\">\r\n                        <CCol md=\"8\">\r\n                            <CCardGroup>\r\n                                {this.state.loading == false ?\r\n                                    (\r\n\r\n                                        <CCard className=\"p-4\">\r\n                                            <CCardBody>\r\n                                                <CForm>\r\n                                                    <h1>Enter Location</h1>\r\n                                                    <p className=\"text-muted\">Enter the location to predict trends</p>\r\n                                                    <CRow>\r\n                                                        <CCol>\r\n                                                            <CFormGroup>\r\n                                                                <CLabel htmlFor=\"state\">State</CLabel>\r\n                                                                <CSelect custom name=\"state\" id=\"state\">\r\n                                                                    {\r\n                                                                        this.state.states.map((state) => {\r\n                                                                            return <option> {state}</option>\r\n                                                                        })\r\n                                                                    }\r\n                                                                </CSelect>\r\n                                                            </CFormGroup>\r\n                                                        </CCol>\r\n                                                    </CRow>\r\n                                                    <CRow>\r\n                                                        <CCol xs=\"12\">\r\n                                                            <CButton color=\"primary\" className=\"px-4\" onClick={() => { this.startload() }}>Predict Trend</CButton>\r\n                                                        </CCol>\r\n                                                    </CRow>\r\n                                                </CForm>\r\n                                            </CCardBody>\r\n                                        </CCard>)\r\n                                    : (<CCard>\r\n                                        <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol>\r\n                                                    {this.state.loadDiv}\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCardBody>\r\n                                        <CCardFooter>\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <CProgress value={this.state.LoadPercentage % 100} showPercentage color={this.state.loadColor} animated className=\"mb-3\" style={{ width: \"135%\", height: \"30px\" }} >\r\n                                                    </CProgress>\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <CButton class=\"btn btn-primary float-right\" type=\"button\" >\r\n                                                        <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                                        <span> &nbsp; {this.state.loadText}</span>\r\n                                                    </CButton>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCardFooter>\r\n                                    </CCard>)\r\n                                }\r\n                            </CCardGroup>\r\n                        </CCol>\r\n                    </CRow>\r\n                </CContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Predict\r\n"],"sourceRoot":""}